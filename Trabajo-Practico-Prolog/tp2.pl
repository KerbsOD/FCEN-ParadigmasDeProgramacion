%%%%%%%%%%%%%%%%%%%%%%%%
%% Tablero
%%%%%%%%%%%%%%%%%%%%%%%%

%% Ejercicio 1
%% tablero(+Filas,+Columnas,-Tablero) instancia una estructura de tablero en blanco
%% de Filas x Columnas, con todas las celdas libres.


tablero(Filas,Columnas,Tablero) :- cantidadDeFilas(Filas,Tablero), cantidadDeColumnasPorFila(Columnas,Tablero).

%%cantidadDeFilas(?Filas,+Tablero)
cantidadDeFilas(Filas,Tablero) :- length(Tablero,Filas).

%%cantidadDeColumnasPorFila(?Columnas,+Tablero)
cantidadDeColumnasPorFila(_,[]).
cantidadDeColumnasPorFila(Columnas,[Fila | Filas]) :- length(Fila,Columnas), cantidadDeColumnasPorFila(Columnas,Filas).


%% Ejercicio 2

%% ocupar(+Pos,?Tablero) será verdadero cuando la posición indicada esté ocupada.
ocupar(Pos,Tablero) :- valorPosicion(Tablero,Pos,ocupada).

%%(+T,+Pos,?Valor)
valorPosicion(Tablero,pos(I,J),Valor) :- posicionValida(Tablero,pos(I,J)), iesimo(I,Tablero,Fila), iesimo(J,Fila,Valor).

%%Una posición es válida si se encuentra dentro del tablero, asumiendo que es un tablero cuadrado.

%%posicionValida(+Tablero,+Pos)
posicionValida(Tablero, pos(I,J)) :- 
  0 =< I, 0 =< J, 
  cantidadDeFilas(Filas,Tablero), 
  I < Filas, 
  cantidadDeColumnasPorFila(Columnas,Tablero), 
  J < Columnas.

%%iesimo(?I,+L,?X)
iesimo(0,[X|_],X).
iesimo(I,[_|XS],X) :- iesimo(I2,XS,X), I is I2 + 1.


%% Ejercicio 3
%% vecino(+Pos, +Tablero, -PosVecino) será verdadero cuando PosVecino sea
%% un átomo de la forma pos(F', C') y pos(F',C') sea una celda contigua a
%% pos(F,C), donde Pos=pos(F,C). Las celdas contiguas puede ser a lo sumo cuatro
%% dado que el robot se moverá en forma ortogonal.


%%Este predicado usa generate and test: genera las 4 posiciones ortogonalente adyacentes y luego testea si la posición se encuentra en el tablero. 

vecino(Pos,Tablero,PosVecino) :- vecinoOrtogonal(Pos,PosVecino), posicionValida(Tablero,PosVecino).

%%vecinoOrtogonal(+Pos1,?Pos2)
vecinoOrtogonal(pos(I,J),pos(I2,J)) :- I2 is I+1.
vecinoOrtogonal(pos(I,J),pos(I,J2)) :- J2 is J+1.
vecinoOrtogonal(pos(I,J),pos(I2,J)) :- I2 is I-1.
vecinoOrtogonal(pos(I,J),pos(I,J2)) :- J2 is J-1.


%% Ejercicio 4
%% vecinoLibre(+Pos, +Tablero, -PosVecino) idem vecino/3 pero además PosVecino
%% debe ser una celda transitable (no ocupada) en el Tablero

%%Este predicado usa generate and test: genera los (a lo sumo 4) vecinos de la posicion y testea si ese vecino no está ocupado.

vecinoLibre(Pos,Tablero,PosVecino) :- vecino(Pos,Tablero,PosVecino), posicionLibre(Tablero,PosVecino).

%% Como los únicos valores validos para un casillero del tablero son una posición libre (representada con _, la cual es una variable) y una posición ocupada
%%(representada por la palabra en sí), determinamos si una posición está libre o no viendo si su contenido es una variable o una constante.

%%posicionLibre(+Tablero,+Pos)
posicionLibre(Tablero,Pos) :- valorPosicion(Tablero,Pos,X), var(X).


%%%%%%%%%%%%%%%%%%%%%%%%
%% Definicion de caminos
%%%%%%%%%%%%%%%%%%%%%%%%

%% Ejercicio 5
%% camino(+Inicio, +Fin, +Tablero, -Camino) será verdadero cuando Camino sea una lista
%% [pos(F1,C1), pos(F2,C2),..., pos(Fn,Cn)] que denoten un camino desde Inicio
%% hasta Fin pasando solo por celdas transitables.
%% Además se espera que Camino no contenga ciclos.
%% Notar que la cantidad de caminos es finita y por ende se tiene que poder recorrer
%% todas las alternativas eventualmente.
%% Consejo: Utilizar una lista auxiliar con las posiciones visitadas


camino(Inicio,Fin,Tablero,Camino) :- 
  posicionLibre(Tablero,Inicio), 
  posicionLibre(Tablero,Fin), 
  Inicio \= Fin,
  caminoConHistorial(Inicio,Fin,Tablero,Camino,[]).  

%% Básicamente, se agrega un parámetro que tiene en cuenta, mientras se está formando un camino, or cuales posiciones ya se circuló, con el fin de evitar
%% ciclos. Usando inducción en la longitud del camino, se plantea el caso base: cuando llegamos a la posición deseada. Aca sólo hace falta comprobar que la posición no
%% fue explorada aún, ya que en el predicado camino ya nos aseguramos que la posición no estuviese ocupada. Para el paso inductivo, tenemos el invariante de que el camino
%% actual es valido: no tiene ciclos y pasa exclusivamente por posiciones libres del tablero adyacentes ortogonalmente entre si. Todas las posiciones por las que se circuló
%% están en la variable Historial. Que se pueda formar un camino desde el actual hacia el fin es lo mismo a que exista un vecino libre al actual, 
%% no fue explorado aún, desde el cual se puede formar un camino hasta el fin.

%% Nota: Según nuestra interpretación, si no hay camino posible entonces Camino queda sin instanciar.

%%caminoConHistorial(+Inicio,+Fin,+Tablero,?Camino,+Historial)
caminoConHistorial(Fin,Fin,_,[Fin],Historial) :- not(member(Fin,Historial)).

caminoConHistorial(Actual,Fin,Tablero,[Actual|XS],Historial) :- 
  Actual \= Fin, 
  vecinoLibre(Actual,Tablero,Vecino), 
  not(member(Vecino,Historial)), 
  caminoConHistorial(Vecino,Fin,Tablero,XS,[Actual|Historial]).


%% 5.1. Analizar la reversibilidad de los parámetros Fin y Camino justificando adecuadamente en cada
%% caso por qué el predicado se comporta como lo hace

%% No es reversible el parámtro fin (ni lo es el parámetro inicio). El problema de esto reside en la función vecinoLibre, la cual no es reversible sobre el
%% parámetro Posición: a su vez, este ultimo no lo es porque posición válida no es reversible sobre el parámetro de la posición, y esto es porque, para verificar que
%% la posición esté en el tablero, testea si ambas cordenadas son positivas usando el predicado =< con el 0 y la coordenada. El predicado =<, como está especificado
%% en la documentación de swipl, solo funciona cuando están instanciados ambos, por ende la posición tiene que ser completamente instanciada para que el predicado
%% posicionValida funcione. Probablemente, si en vez de usar =< usamos el predicado desde, (y/o el predicado between, para también solucionar el posible problema con el predicado
%% < posterior), posicionValida sería reversible sobre Posición, por lo que, de no instanciarla, generaría toda posicion del tablero. Como buena parte del predicado camino
%% depende de posiciónValida, lo más probable es que, de corregir esto, camino quedaría reversible sobre tanto Inicio como Fin.

%% El parámetro Camino es reversible: si está instanciado con el resto de los parámetros, nos dice si ese camino es un camino válido desde inicio a fin en la
%% posición dada. Esto es así porque caminoConHistorial es reversible sobre el camino, y esto es así porque, tanto en el caso base como en el caso recursivo, los
%% predicados usados son reversibles sobre el camino y sus variables: member es funciona con el elemento instanciado, el operador \= da verdadero si las constantes
%% no unifican, y vecinoLibre es reversible sobre el resultado (esto es, te dice si una posición es vecino de otra cuando ambos están instanciados).


%% Ejercicio 6
%% camino2(+Inicio, +Fin, +Tablero, -Camino) ídem camino/4 pero que las soluciones
%% se instancien en orden creciente de longitud.
camino2(Inicio,Fin,Tablero,Camino) :- 
  casilleros(Tablero,N), 
  between(2,N,Largo), 
  length(Camino,Largo), 
  camino(Inicio,Fin,Tablero,Camino).


%%Cantidad de casilleros de un tablero.

%%casilleros(+Tablero, ?N)
casilleros(Tablero,N) :- 
  cantidadDeFilas(Filas,Tablero), 
  cantidadDeColumnasPorFila(Columnas,Tablero), 
  N is Filas*Columnas.

%% 6.1. Analizar la reversibilidad de los parámetros Inicio y Camino justificando adecuadamente en
%% cada caso por qué el predicado se comporta como lo hace.

%% El predicado no es reversible sobre Inicio, principalmente porque el parámetro Inicio no es reversible en el predicado camino, lo cual está justificado en el ejercicio
%% anterior. Veamos que pasa si no instanciamos Inicio: el predicado casilleros(Tablero,N) no instancia inicio, sino que instancia N, tampoco el predicado between(2,N,Largo), el cual
%% nos instancia todo valor factible de longitud de un camino en el tablero instanciado, es decir, nos instancia Largo. length(Camino,Largo) no nos instancia Inicio, sino queda
%% nos especifica que el camino que generará el siguiente predicado tendrá longitud largo, entonces Inicio no está instanciado cuando se llama a camino, y sabemos por la reversibilidad
%% del predicado camino que esto no funciona, por ende el error cascadea hasta camino2.  

%% Veamos qué pasa cuando el parámetro Camino está instanciado en camino2: casilleros(Tablero,N) no es modificado por esto, ya que solo involucra al Tablero instanciado
%% para instanciarnos una cota superior sobre la longitud del camino. between(2,N,Largo) nos genera todos las longitudes posibles de un camino válido en el tablero en Largo.
%% De vuelta, la instanciación de Camino no afecta este predicado. Cuando se llega al predicado length(Camino,Largo), se sabe que length, por como está documentado, funciona
%% cuando la lista está instanciada, y, en particular, cuando ambos parámetros están instanciados, nos dice efectivamente si la lista dada tiene la longitud dada.
%% Entonces, de no ser iguales la longitud del camino y Largo, directamente da false y hace backtracking. De ser verdadero esto último, se procede al predicado camino,
%% como sabemos por el ejercicio 5 que este es reversible sobre camino, entonces nos va a determinar si el camino dado es un camino válido entre inicio y fin en el tablero.
%% Por ende, camino2 es también reversible sobre el parámetro camino, y, entonces, en vez de enumerar todo camino por orden creciente de longitud, nos dice si una lista de
%% posiciones es un camino válido de inicio a fin en el tablero, o sea, tiene exactamente la misma funcionalidad que el predicado camino con la misma instanciación.

%% Ejercicio 7
%% caminoOptimo(+Inicio, +Fin, +Tablero, -Camino) será verdadero cuando Camino sea un
%% camino óptimo sobre Tablero entre Inicio y Fin. Notar que puede no ser único.

%% Existe un camino entre el inicio y el fin, de longitud L, y no existe otro camino entre inicio y fin de longitud menor.
%% Usa generate and test: Genera los caminos y testea que no haya camino con longitud estrictamente menor.

caminoOptimo(Inicio,Fin,Tablero,Camino) :- 
  unCamino(Inicio,Fin,Tablero,Camino,L), 
  not((unCamino(Inicio,Fin,Tablero,_,L2), L2<L)).


%% Nos instancia un camino desde Inicio a Fin que tenga la longitud especificada.

%% unCamino(+Inicio,+Fin,+Tablero,?Camino,?Longitud)
unCamino(Inicio,Fin,Tablero,Camino,Longitud) :- camino(Inicio,Fin,Tablero,Camino), length(Camino,Longitud).

%%%%%%%%%%%%%%%%%%%%%%%%
%% Tableros simultáneos
%%%%%%%%%%%%%%%%%%%%%%%%


%% Ejercicio 8
%% caminoDual(+Inicio, +Fin, +Tablero1, +Tablero2, -Camino) será verdadero
%% cuando Camino sea un camino desde Inicio hasta Fin pasando al mismo tiempo
%% sólo por celdas transitables de ambos tableros.

%% Aquí se aprovecha de la reversibilidad del parámetro camino en el predicado camino. La primer llamada, sin el camino instanciado, devuelve un camino del primer tablero, y
%% la segunda llamada tiene al camino instanciado, por lo que se reduce a ver si el camino es válido en el segundo tablero.

%%Usa generate and test: genera todos los caminos del primer tablero y testea que cada uno sea un camino del segundo.

caminoDual(Inicio,Fin,Tablero1,Tablero2,Camino) :- camino(Inicio,Fin,Tablero1,Camino), camino(Inicio,Fin,Tablero2,Camino).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% TESTS 'tablero' y 'ocupar'
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
cantidadTestsTablero(3).

testTablero(1) :- tablero(0,0,[]).
testTablero(2) :- ocupar(pos(0,0), [[ocupada]]).
testTablero(3) :- 
  tablero(3,3, T),
  ocupar(pos(0,0), T),
  ocupar(pos(1,1), T),
  ocupar(pos(2,2), T),
  T = [[A1, A2, A3], [B1, B2, B3], [C1, C2, C3]],
  A1 = ocupada, var(A2), var(A3),
  var(B1), B2 = ocupada, var(B3),
  var(C1), var(C2), C3 = ocupada.

%%%%%%%%%%%%%%%%%
%% TESTS `vecino`
%%%%%%%%%%%%%%%%%
cantidadTestsVecino(14).

testVecino(1) :- vecino(pos(0,0), [[_,_]], pos(0,1)).

testVecino(2) :- % Correctas
  tablero(ej5x5, T), 
  vecino(pos(0,0), T, pos(1,0)),
  vecino(pos(0,0), T, pos(0,1)).

testVecino(3) :- % Diagonal
  tablero(ej5x5, T), 
  not(vecino(pos(0,0), T, pos(1,1))).

testVecino(4) :- % Out-of-Bounds
  tablero(ej5x5, T), 
  not(vecino(pos(4,4), T, pos(5,5))).

testVecino(5) :- % Ocupadas
  tablero(ej5x5, T), 
  vecino(pos(1,0), T, pos(1,1)), % Contigua ocupada
  vecino(pos(1,1), T, pos(1,2)). % Actual y contigua ocupadas

testVecino(6) :- % Completo
  tablero(ej5x5, T),
  vecino(pos(3,3), T, pos(3,4)), % Derecha
  vecino(pos(3,3), T, pos(4,3)), % Abajo
  vecino(pos(3,3), T, pos(3,2)), % Izquierda
  vecino(pos(3,3), T, pos(2,3)). % Arriba

testVecino(7) :- % Completo
  tablero(ej5x5, T),
  not(vecino(pos(3,3), T, pos(4,4))), % Abajo-Derecha
  not(vecino(pos(3,3), T, pos(4,2))), % Abajo-Izquierda
  not(vecino(pos(3,3), T, pos(2,2))), % Arriba-Izquierda
  not(vecino(pos(3,3), T, pos(2,4))). % Arriba-Derecha

testVecino(8) :- % Consigo misma
  tablero(ej5x5, T),
  not(vecino(pos(3,3), T, pos(3,3))).

%%%%%%%%%%%%%%%%%%%%%%
%% TESTS `vecinoLibre`
%%%%%%%%%%%%%%%%%%%%%%

testVecino(9) :- % Correctas
  tablero(ej5x5, T), 
  vecinoLibre(pos(0,0), T, pos(1,0)),
  vecinoLibre(pos(0,0), T, pos(0,1)).

testVecino(10) :- % Diagonal
  tablero(ej5x5, T), 
  not(vecinoLibre(pos(0,0), T, pos(1,1))).

testVecino(11) :- % Out-of-Bounds
  tablero(ej5x5, T), 
  not(vecinoLibre(pos(4,4), T, pos(5,5))).

testVecino(12) :- % Ocupadas
  tablero(ej5x5, T), 
  not(vecinoLibre(pos(1,0), T, pos(1,1))),
  not(vecinoLibre(pos(2,2), T, pos(1,2))).

testVecino(13) :- % Posicion libre no se tiene a si misma
  tablero(ej5x5, T),
  not(vecinoLibre(pos(3,3), T, pos(3,3))).

testVecino(14) :- % Posicion ocupada no se tiene a si misma
  tablero(ej5x5, T),
  not(vecinoLibre(pos(1,1), T, pos(1,1))).

%%%%%%%%%%%%%%%%%%%%%%
%% TESTS `camino`
%%%%%%%%%%%%%%%%%%%%%%
cantidadTestsCamino(5).

testCamino(1) :- % Inicio y Fin son iguales, entonces Camino vacío.
  tablero(ej5x5, T),
  not(camino(pos(0,0), pos(0,0), T, _)).

testCamino(2) :- % No existen ciclos (usa reversibilidad)
  tablero(3,3, T),
  not((camino(pos(0,0), pos(2,1), T, C), C = [pos(0,0), pos(1,0), pos(1,1), pos(1,2), pos(0,2), pos(0,1), pos(1,1), pos(2,1)])),
  not((camino(pos(2,1), pos(0,0), T, C), C = [pos(2,1), pos(1,1), pos(0,1), pos(0,2), pos(1,2), pos(1,1), pos(1,0), pos(0,0)])).

testCamino(3) :- % Ninguna posición de Camino está ocupada
  tablero(3,3,T),
  ocupar(pos(0,1), T),
  ocupar(pos(1,1), T),
  camino(pos(0,0), pos(0,2), T, C),
  not(member(pos(0,1), C)),
  not(member(pos(1,1), C)).

testCamino(4) :-  % No existe camino si el inicio y final estan obstruidos por casilleros ocupados.
  tablero(3,3,T),
  ocupar(pos(0,1), T),
  ocupar(pos(1,1), T),
  ocupar(pos(2,1), T),
  not(camino(pos(0,0), pos(0,2), T, _)).

%%%%%%%%%%%%%%%%%%%%%%
%% TESTS `camino2`
%%%%%%%%%%%%%%%%%%%%%%

testCamino(5) :- % Los caminos se instancian de forma creciente en longitud
  tablero(ej5x5, T),
  findall(Longitud,(camino2(pos(0,0),pos(2,3),T,C), length(C,Longitud)),ListaDeLongitudes),
  sorted(ListaDeLongitudes).

sorted([]) .
sorted([_]) .
sorted([X,Y | Z]) :- X =< Y , sorted([Y | Z]).

%%%%%%%%%%%%%%%%%%%%%%
%% TESTS `caminoOptimo`
%%%%%%%%%%%%%%%%%%%%%%
cantidadTestsCaminoOptimo(2).

testCaminoOptimo(1) :- % Existe un unico camino tal que tiene la longitud optima.
  tablero(3,1,T),
  caminoOptimo(pos(0,0),pos(2,0),T,[pos(0,0),pos(1,0),pos(2,0)]).

testCaminoOptimo(2) :- % La longitud de todos los caminos que instancian es igual a la optima. No existe un camino tal que sea optimo y su longitud no sea 6.
  tablero(ej5x5, T),
  not((caminoOptimo(pos(0,0),pos(2,3),T,C), 
  not(length(C,6)))).
  %Este test es el que da un pequeno delay. CaminoOptimo no es muy eficiente que digamos.

%%%%%%%%%%%%%%%%%%%%%%
%% TESTS `caminoDual`
%%%%%%%%%%%%%%%%%%%%%%
cantidadTestsCaminoDual(2).

testCaminoDual(1) :- % Existe un camino al fusionarse los tableros
 tablero(ej5x5,T1),
 tablero(figura5Tablero2,T2),
 caminoDual(pos(0,0),pos(4,3),T1,T2,C),
 C = [pos(0,0),pos(1,0),pos(2,0),pos(3,0),pos(4,0),pos(4,1),pos(4,2),pos(4,3)].

testCaminoDual(2) :- % No existe camino cuando los tablero mergeados forman una pared de casillas ocupadas
 tablero(3,3,T1),
 tablero(3,3,T2),
 ocupar(pos(1,0),T1),
 ocupar(pos(1,1),T1),
 ocupar(pos(1,2),T1),
 not(caminoDual(pos(0,0),pos(2,2),T1,T2,_)).


tests(tablero) :- cantidadTestsTablero(M), forall(between(1,M,N), testTablero(N)).
tests(vecino) :- cantidadTestsVecino(M), forall(between(1,M,N), testVecino(N)).
tests(camino) :- cantidadTestsCamino(M), forall(between(1,M,N), testCamino(N)).
tests(caminoOptimo) :- cantidadTestsCaminoOptimo(M), forall(between(1,M,N), testCaminoOptimo(N)).
tests(caminoDual) :- cantidadTestsCaminoDual(M), forall(between(1,M,N), testCaminoDual(N)).

tests(todos) :-
  tests(tablero),
  tests(vecino),
  tests(camino),
  tests(caminoOptimo),
  tests(caminoDual).

tests :- tests(todos).

%% Tableros
tablero(ej5x5, T) :-
  tablero(5, 5, T),
  ocupar(pos(1, 1), T),
  ocupar(pos(1, 2), T).

tablero(1, T) :-
  tablero(5, 5, T),
  ocupar(pos(1, 1), T),
  ocupar(pos(1, 2), T).

tablero(figura5Tablero2, T) :-
  tablero(5, 5, T),
  ocupar(pos(0, 2), T),
  ocupar(pos(2, 1), T),
  ocupar(pos(2, 2), T).













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































%%charmelon
